<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | mohanraj nagasamy]]></title>
  <link href="http://mohanraj-nagasamy.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://mohanraj-nagasamy.github.io/"/>
  <updated>2014-04-14T20:49:30-06:00</updated>
  <id>http://mohanraj-nagasamy.github.io/</id>
  <author>
    <name><![CDATA[Mohanraj Nagasamy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Blocks in Java Lang]]></title>
    <link href="http://mohanraj-nagasamy.github.io/blog/2014/02/23/blocks-in-java-lang/"/>
    <updated>2014-02-23T18:29:28-07:00</updated>
    <id>http://mohanraj-nagasamy.github.io/blog/2014/02/23/blocks-in-java-lang</id>
    <content type="html"><![CDATA[<p>We all love blocks in Ruby. Wouldn’t it be great if Java Lang had support for blocks? Well, Java Lang will support <a href="http://openjdk.java.net/projects/lambda/">blocks/lambdas</a> in <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">jdk8</a>, but in a limited way.</p>

<p>Until you get a chance to work with <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">jdk8</a> for real blocks/lambdas, there is an old trick we can apply while creating/initializing an object. That is called the less known <a href="http://c2.com/cgi/wiki?DoubleBraceInitialization">“Double Brace Initialization”</a> java idiom. This just works for <strong>creating/initializing an object</strong>. You can’t apply this idiom in other places like you would in Ruby. But, this trick works in all the version of java as well including java 1.2</p>

<!-- more -->


<p>Let’s say you have the following class and want to create a list of valid order statuses:</p>

<p>``` java OrderStatus.java
public class OrderStatus {</p>

<pre><code>private String code;
private String description;

OrderStatus(String code, String description) {
    this.code = code;
    this.description = description;
}

public OrderStatus() {
}

String getCode() {
    return code;
}

void setCode(String code) {
    this.code = code;
}

String getDescription() {
    return description;
}

void setDescription(String description) {
    this.description = description;
}


@Override
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (o == null || getClass() != o.getClass()) {
        return false;
    }

    OrderStatus that = (OrderStatus) o;

    if (code != null ? !code.equals(that.code) : that.code != null) {
        return false;
    }
    if (description != null ? !description.equals(that.description) : that.description != null) {
        return false;
    }

    return true;
}

@Override
public int hashCode() {
    int result = code != null ? code.hashCode() : 0;
    result = 31 * result + (description != null ? description.hashCode() : 0);
    return result;
}
</code></pre>

<p>}
```</p>

<p>First you would create something like this:</p>

<p><code>java
final static Set&lt;OrderStatus&gt; VALID_ORDER_STATUSES = new HashSet&lt;OrderStatus&gt;();
</code></p>

<p>And you would create a static block and add the valid order statuses:</p>

<p><code>java
static {
    VALID_ORDER_STATUSES.add(new OrderStatus("01", "Order Placed"));
    VALID_ORDER_STATUSES.add(new OrderStatus("02", "Order Processed"));
    VALID_ORDER_STATUSES.add(new OrderStatus("03", "Order Cancelled"));
    VALID_ORDER_STATUSES.add(new OrderStatus("04", "Order Failed"));
}
</code></p>

<p>Wouldn’t be great if we can combine into one step? Well, we can do by using Double Brace Initialization. Let’s see how it would look:</p>

<p><code>java
final static Set&lt;OrderStatus&gt; VALID_ORDER_STATUSES_WITH_DOUBLE_BRACE = new HashSet&lt;OrderStatus&gt;() { {
            add(new OrderStatus("01", "Order Placed"));
            add(new OrderStatus("02", "Order Processed"));
            add(new OrderStatus("03", "Order Cancelled"));
            add(new OrderStatus("04", "Order Failed"));
        } };
</code></p>

<p>This code is completely valid and works in <strong>all the versions of java</strong>. You may wonder what is going on here.</p>

<p>The first brace creates <strong>anonymous inner/sub class</strong> that extends HashSet and the second one declares <strong>instance initializer</strong>. The inner class doesn’t add new instance variables, but it contains an initializer block.</p>

<p>Let’s see how we can apply this trick while creating <em>OrderStatus</em> with default constructor, not using two params constructor.</p>

<p><code>java
private static OrderStatus INVALID_ORDER_STATUS = new OrderStatus() { {
        setCode("XX");
        setDescription("Invalid");
    } };
</code></p>

<p>You have to note that if you create a new object with the same order status code and description is <strong>not exactly equal</strong> to the one you created.</p>

<p>The condition would be false in equals() methods:</p>

<p><code>java
if (o == null || getClass() != o.getClass()) {
    return false;
}
</code></p>

<p>Let&rsquo;s say you are creating a new:</p>

<p><code>java
private static OrderStatus INVALID_ORDER_STATUS = new OrderStatus() { {
        setCode("XX");
        setDescription("Invalid");
    } };
 
private static OrderStatus INVALID_ORDER_STATUS_2 = new OrderStatus() { {
        setCode("XX");
        setDescription("Invalid");
    } };
</code></p>

<p><code>INVALID_ORDER_STATUS.equals(INVALID_ORDER_STATUS_2)</code> and <code>INVALID_ORDER_STATUS.equals(INVALID_ORDER_STATUS_3)</code> will return false, because it has different anonymous class.</p>

<p>Collection classes should be fine if you create objects like the one we created. <code>VALID_ORDER_STATUSES_WITH_DOUBLE_BRACE.contains(new OrderStatus("01", "Order Placed"))</code> will return true.</p>

<p>You can use the same trick, if you want to call some methods just after creating an object like this:</p>

<p><code>java
Action action = new Action() { {
        step1();
        step2();
    } };
String result = action.result();
System.out.println("action result = " + result);
</code></p>

<p>And, you can use this idiom while passing object as a parameter.</p>

<p>``` java
valideOrderStatues(new HashSet<OrderStatus>() { {
            add(new OrderStatus(&ldquo;01&rdquo;, &ldquo;Order Placed&rdquo;));
            add(new OrderStatus(&ldquo;02&rdquo;, &ldquo;Order Processed&rdquo;));
            add(new OrderStatus(&ldquo;03&rdquo;, &ldquo;Order Cancelled&rdquo;));
            add(new OrderStatus(&ldquo;04&rdquo;, &ldquo;Order Failed&rdquo;));
        } });</p>

<p>```</p>

<p>It just makes your code more concise. Try to use wherever it makes sense. All the code is in <a href="https://github.com/mohanraj-nagasamy/DoubleBrace/">github</a>.</p>
]]></content>
  </entry>
  
</feed>
