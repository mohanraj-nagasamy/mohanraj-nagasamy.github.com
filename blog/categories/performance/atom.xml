<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Performance | mohanraj nagasamy]]></title>
  <link href="http://mohanraj-nagasamy.github.io/blog/categories/performance/atom.xml" rel="self"/>
  <link href="http://mohanraj-nagasamy.github.io/"/>
  <updated>2014-04-14T20:49:30-06:00</updated>
  <id>http://mohanraj-nagasamy.github.io/</id>
  <author>
    <name><![CDATA[Mohanraj Nagasamy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Performance]]></title>
    <link href="http://mohanraj-nagasamy.github.io/blog/2014/03/12/java-performance/"/>
    <updated>2014-03-12T21:20:11-06:00</updated>
    <id>http://mohanraj-nagasamy.github.io/blog/2014/03/12/java-performance</id>
    <content type="html"><![CDATA[<p>Notes from <a href="http://www.informit.com/store/java-performance-livelessons-video-training-downloadable-9780133443554">Java Performance</a> by Charlie Hunt. Reference <a href="http://www.amazon.com/Java-Performance-Charlie-Hunt/dp/0137142528">book</a> by Charlie Hunt and Binu John.</p>

<h4>Lesson 1: JVM Overview</h4>

<ul>
<li><p>From Java 7u21, there is <a href="http://www.oracle.com/technetwork/java/javase/downloads/server-jre7-downloads-1931105.html">server JRE</a> available for UNIX 64 bit OSes. It has got it everything jdk has, except no browser plug-in, no auto updater.</p></li>
<li><p>Understand the major components of a modern Java Virtual Machine</p>

<ul>
<li>HotSpot VM runtime</li>
<li>Garbage collector/ memory manager

<ul>
<li>Generational GC &ndash; it partitions the Java heap into two or more regions / generations

<ul>
<li>Young vs Old</li>
</ul>
</li>
<li>Permanent Generation &ndash; Holds class data structures

<ul>
<li>In Java 8 &ndash; it has been eliminated in favor of a meta-space</li>
</ul>
</li>
</ul>
</li>
<li>JIT Compiler

<ul>
<li>Generates native byte code</li>
<li>Client mode</li>
<li>Server mode</li>
<li>Tiered &ndash; Default In Java 8 &ndash; enabled via -XX:+TieredCompilation</li>
</ul>
</li>
</ul>
</li>
<li><p>Runtime subsystem</p>

<ul>
<li><code>-XX:+PrintFlagsFinal</code></li>
<li><code>-XX:+PrintGCDetails</code></li>
</ul>
</li>
<li>Understand the memory management garbage collection (GC) subsystem

<ul>
<li>jvisualvm

<ul>
<li>Install plug-in visual GC</li>
<li>Install memory-pool plug-in from <a href="https://java.net/projects/memorypoolview">here</a></li>
<li>Once objects reaches 15 max tenuring, will promoted to old gen space</li>
<li><a href="https://code.google.com/p/hatter-source-code/wiki/jtop">jTop</a></li>
</ul>
</li>
<li>JIT compiler subsystem

<ul>
<li>Look at code cache from memory-pool plug-in for JIT compilation</li>
</ul>
</li>
</ul>
</li>
</ul>


<hr />

<h4>Lesson 2: Collecting Performance Statistics</h4>

<ul>
<li>Understand the importance of a methodology</li>
<li>Understand which operating system metrics to monitor

<ul>
<li><p>Understand which operating system metrics to monitor: Monitor metrics on Windows.
  You can monitoring CPU, Memory, Network:</p>

<ol>
<li> GUI Tool: Performance Monitor</li>
<li> CMD Tool: <code>typeperf</code></li>
</ol>
</li>
<li><p>Understand which operating system metrics to monitor: Monitor metrics on Linux</p>

<ol>
<li> GUI Tool: System Monitory in Ubuntu</li>
<li>CMD tool: <code>vm_stat</code> <interval>
           <code>mpstat -P ALL</code>
           <code>top</code></li>
<li>Monitor the CPU Scheduler Run Queue
  use vmstat to monitor run queue</li>
<li>Monitor High Voluntary Context Switching

<ul>
<li>Can indicate Java application that are experiencing lock contention

<ul>
<li>Makes it difficulties in scaling</li>
</ul>
</li>
<li>Use <code>pidstat</code> to monitor (need <code>sysstat</code> package required)  <br/>
  ex: <code>pidstat -w -I -t -p &lt;pid&gt; &lt;interval&gt;</code>
Monitor network
use nicstat
Monitor disk/io
use iostat</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li>Understand what JVM metrics to monitor

<ul>
<li>Important JVM metrics:</li>
<li>Garbage collection:
  Use <code>PrintGCDetails</code> to log gc details
  you can also use <code>-XX:+PrintGCDateStamps</code> or <code>-XX:+PrintGCTimeStamps</code> &ndash; gives point and time when the gc has occurred
  use <code>-Xloggc=/somepath/gc.log</code> &ndash; to log gc log</li>
<li>Monitor app exectution time and stopped time

<ul>
<li>Use <code>-XX:+PrintGCApplicationStoppedTime</code> and <code>-XX:+PrintApplicationConcurrentTime</code></li>
</ul>
</li>
<li>Other to consider but not necessarily required

<ul>
<li>JIT compilation: <code>-XX:+PrintCompilation</code>, <code>-XX:+PrintInlining</code> &ndash; these flags are not generally used.</li>
<li>Fine tune JVM heap space sizes: <code>-XX:+PrintTenuringDistribution</code>, <code>PrintAdaptiveSizePolicy</code> (Paraller GC or G1 only)</li>
</ul>
</li>
<li>Remote monitoring using <code>jstatd</code>

<ul>
<li>Requires a security manager and security policy file</li>
</ul>
</li>
<li>App level metrics to monitor:

<ul>
<li>Begin and end time of a transaction</li>
<li>Observing app level JMX MBeans especially those that offer performance information</li>
<li>Java EE container stats:

<ul>
<li>Available JDBC connections</li>
<li>Active/Available Threads</li>
<li>Request arrival rate</li>
<li>Request response times</li>
</ul>
</li>
<li>Build App level stats via <code>MBeans</code>. Example is on the book.</li>
</ul>
</li>
</ul>
</li>
</ul>


<hr />

<h4>Lesson 3: Understand HotSpot JVM GC Logs</h4>

<ul>
<li>Understand how Parallel GC works

<ul>
<li>Understand Parallel GC logs</li>
</ul>
</li>
<li>Understand how CMS GC works

<ul>
<li>Understand CMS GC logs</li>
</ul>
</li>
<li>Understand how G1 GC works

<ul>
<li>Understand G1 GC logs</li>
</ul>
</li>
</ul>


<blockquote><p>All of them produces totally different information</p></blockquote>

<hr />

<h4>Lesson 4: Tune the HotSpot JVM Step-by-Step</h4>

<ul>
<li>Create a plan of attack

<ul>
<li>Throughput vs Latency vs Footprint</li>
</ul>
</li>
<li>Understand the step-by-step process</li>
<li>Determine memory footprint size</li>
<li>Tune for latency / responsiveness:    Tools to help visualize gc pause times: <a href="https://java.net/projects/gchisto">gchisto</a>, <a href="http://www.jclarity.com/censum/">censum</a> from jclarity.com</li>
<li>Tune for throughput: <code>-XX:+AggresiveOpts</code> to turn on aggressive gc optimizations</li>
</ul>


<h2>More resources:</h2>

<ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html">http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html</a></li>
<li><a href="http://www.nbl.fi/~nbl97/java/tuning/jvm_internals.pdf">http://www.nbl.fi/~nbl97/java/tuning/jvm_internals.pdf</a></li>
<li><a href="http://java.ociweb.com/mark/other-presentations/JavaGC.pdf">http://java.ociweb.com/mark/other-presentations/JavaGC.pdf</a></li>
<li><a href="http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136373.html">http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136373.html</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg27013456&amp;aid=1">http://www-01.ibm.com/support/docview.wss?uid=swg27013456&amp;aid=1</a></li>
<li><a href="https://secure.trifork.com/dl/qcon-newyork-2012/slides/5.%20ExtremeJavaPerformanceQConNYC.pdf">https://secure.trifork.com/dl/qcon-newyork-2012/slides/5.%20ExtremeJavaPerformanceQConNYC.pdf</a></li>
<li><a href="http://www.infoq.com/articles/book-java-performance">http://www.infoq.com/articles/book-java-performance</a></li>
<li><a href="http://www.infoq.com/presentations/Extreme-Performance-Java">http://www.infoq.com/presentations/Extreme-Performance-Java</a></li>
<li><a href="http://www.oracle.com/technetwork/java/javaseproducts/mission-control/index.html">http://www.oracle.com/technetwork/java/javaseproducts/mission-control/index.html</a></li>
<li><a href="http://docs.oracle.com/javase/specs/">Java Language and Virtual Machine Specifications</a></li>
<li><a href="http://hatter-source-code.googlecode.com/svn/trunk/attachments/wiki/performance/linux-performance-analysis-and-tools.pdf">linux-performance-analysis-and-tools</a></li>
<li><a href="https://code.google.com/p/hatter-source-code/wiki/Study_Java_Diagnosis">Study_Java_Diagnosis</a></li>
<li><a href="http://www.javaperformancetuning.com/tools/index.shtml">Java Performance Tuning tool reports</a></li>
<li><a href="http://samuraism.jp/samurai/en/index.html">Samurai</a></li>
<li><a href="http://people.apache.org/~billa/oscon2012/OSCON2012TroubleShootJava.pdf">OSCON2012 TroubleShoot Java</a></li>
</ul>


<p>I would highly encourage to read the <a href="http://www.amazon.com/Java-Performance-Charlie-Hunt/dp/0137142528">book</a> or take the <a href="http://www.informit.com/store/java-performance-livelessons-video-training-downloadable-9780133443554">LiveLessons</a>. Charlie Hunt is awesome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Performance test your application with Gatling]]></title>
    <link href="http://mohanraj-nagasamy.github.io/blog/2014/02/23/performance-test-your-application-with-gatling/"/>
    <updated>2014-02-23T19:18:00-07:00</updated>
    <id>http://mohanraj-nagasamy.github.io/blog/2014/02/23/performance-test-your-application-with-gatling</id>
    <content type="html"><![CDATA[<p>When you think about performance testing your application, you may think about the below picture and a tool to test.</p>

<p><img class="right" src="/images/posts/truck-load.png" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>One open source tool that comes to mind is <a href="http://jmeter.apache.org/">JMeter</a>. For very simple tests, I tend use <a href="http://httpd.apache.org/docs/2.2/programs/ab.html">apache benchmarking</a>. But there are other tools like <a href="http://grinder.sourceforge.net/">Grinder</a>, <a href="http://www8.hp.com/us/en/software-solutions/software.html?compURI=1175451">LoadRunner</a>, <a href="http://www.neotys.com/product/overview-neoload.html">NeoLoad</a>, <a href="http://tsung.erlang-projects.org/">Tsung</a>, and <a href="http://www.soapui.org/Getting-Started/load-testing.html">SoapUI</a> for web services testing. Then there is <a href="https://code.google.com/p/caliper/">Caliper</a> and <a href="http://openjdk.java.net/projects/code-tools/jmh">jmh</a> for micro benchmarking, which target use cases.</p>

<!-- more -->


<h5>So what makes <a href="http://gatling-tool.org/">Gatling</a> different from other tools is:</h5>

<ul>
<li>Usability – GUI vs Script (Code)</li>
<li>Maintainability</li>
<li>Reporting</li>
<li>Integration with other tools like Maven, Jenkins</li>
<li>Underlying Technologies</li>
</ul>


<h4>Usability – GUI vs Script (Code)</h4>

<p>Using the GUI to do performance tests is difficult and unintuitive.</p>

<p>Gatling provides an elegant <a href="http://gatling-tool.org/cheat-sheet/">DSL</a> written in <a href="http://www.scala-lang.org/">Scala</a> to describe your test scenarios of your app. DSL scripts are intuitive and simple to create. Using the recorder (like <a href="http://jmeter.apache.org/">JMeter</a>) it can generate scripts that will look similar to a hand written one. Your can then tweak the generated scripts anyway you want.</p>

<p>You don’t have to know Scala to write scripts. You can get an introduction <a href="http://twitter.github.io/scala_school/">here</a> or just think of them as Javascript code (at least for usage purpose). Scals’s variable declarations are either by var (mutable variable) or by val (immutable variable).</p>

<p>```scala
 val httpConf = http.baseURL(&ldquo;<a href="https://twitter.com">https://twitter.com</a>&rdquo;)
  val scn = scenario(&ldquo;Twitter test&rdquo;)
    .exec(
      http(&ldquo;get login&rdquo;)
        .get(&ldquo;/&rdquo;)
        .check(authenticity_token))
    .exec(
      http(&ldquo;post login &amp; get the twitter page&rdquo;)
        .post(&ldquo;/sessions&rdquo;)
        .param(&ldquo;session[username_or_email]&rdquo;, username)
        .param(&ldquo;session[password]&rdquo;, password)
        .param(&ldquo;authenticity_token&rdquo;, authenticity_token)
        .check(status.is(200))
        .check(bodyString(&ldquo;test_some_text&rdquo;).exists)
        .check(regex(&ldquo;<strong>444</strong> Tweets&rdquo;).exists))
    .exec(
      http(&ldquo;logout from twitter&rdquo;)
        .post(&ldquo;/logout&rdquo;)
        .check(status.is(200)))
 
setUp(scn.inject(atOnce(2 users))).protocols(httpConf)</p>

<p>```</p>

<p>I created the above script, which load tests the twitter.com site. You can checkout the full source code <a href="https://github.com/mohanraj-nagasamy/gatling-maven-plugin-demo">here</a>, which is a cloned maven project from <a href="https://github.com/excilys/gatling/tree/master/gatling-maven-plugin">gatling-maven-plugin</a>. Take a look at the <a href="https://github.com/mohanraj-nagasamy/gatling-maven-plugin-demo/blob/master/src/test/scala/twitter/TwitterSimulation.scala">TwitterSimulation.scala</a> file that I added to the project.</p>

<p>Once downloaded, execute with the following maven command with your tweeter username and password:</p>

<p><code>
mvn gatling:execute -Dgatling.simulationClass=twitter.TwitterSimulation -Dusers=&lt;no-of-concurrent-users&gt; -Dtweets=&lt;no-of-your-tweets&gt; -Dusername=&lt;twitter-user-name&gt; -Dpassword=&lt;twitter-password&gt;
</code></p>

<p><em>Note</em>: Keep the concurrent user count between 2 and 5. If you add more load twitter they will display the CAPTCHA login page instead. This is to avoid a <a href="http://en.wikipedia.org/wiki/Denial-of-service_attack">DoS</a> attack. In other words the login test may fail intermittently based on how many times you run the test.</p>

<p>This script gets you to twitter.com and posts with username, password and authenticity token that is get generated when you request twitter.com.</p>

<p>You can extract values from the HTTP response like this:</p>

<p><code>scala
val authenticity_token = regex("""input type="hidden" value="([^"]*)"""").saveAs("authenticity_token")
</code></p>

<p>With the response from the HTTP post, it verifies the http status code and the content of the body using bodyString()and regex() utility methods. It also logs-out from the site.</p>

<p>Real users usually reads the pages and clicks through the links. To get this real user simulation, there is a <a href="https://github.com/excilys/gatling/wiki/Structure-Elements#wiki-pause">pause()</a> method that can be used for this purpose. There are other <a href="https://github.com/excilys/gatling/wiki/Structure-Elements">structural elements</a> available.</p>

<p>The project has two more tests – basic and advanced simulation. Take a look at and run them in the same way as twitter one.</p>

<p>Gatling automatically handles http headers and cookies. It also auto redirects based on headers, which makes testing sessions and OAuth based applications easier.</p>

<p>Testing a RESTful service layer is mush easier with a script than using the GUI.
Here is nice blog post on how Gatling is used to test the <a href="http://maxdemarzi.com/2013/02/14/neo4j-and-gatling-sitting-in-a-tree-performance-t-e-s-t-ing/">Neo4j REST</a> interface.</p>

<p>To test the SOAP interface, I may use <a href="http://www.soapui.org/Getting-Started/load-testing.html">SoapUI</a>, which handles most of the SOAP plumbing. You can use Gatling to load test SOAP as well, however you will have to write the SOAP headers and xml body yourself.</p>

<p><em>Note</em>: Gatling 2.x undertook major <a href="https://github.com/excilys/gatling/wiki/Gatling-2">API</a> refactoring and is not compatible with Gatling 1.x. You may want to watch out for this. I am using version 2.0.0-M3 in all my examples.</p>

<p>There are other tools that support scripting like Beanshell, Python, Clojure and Erlang. But they are not simple to use and learn like Gatling.</p>

<h4>Maintainability</h4>

<p>A script is always easier to modify as a project evolves than maintaining a GUI based load test file. A script also fits very well into your daily workflow as it integrates very well with developer tools like maven, jenkins and your favorite <a href="https://github.com/excilys/gatling/wiki/Ide-integration">IDE</a>.</p>

<h4>Reporting</h4>

<p>Gatling generates nice and easy to understand <a href="https://github.com/excilys/gatling/wiki/Reports">static reports</a> with metrics, which easily can be shared with anyone on your team. The reports are static and can be run with the daily build or when you release your application. You can then compare the results between each release to monitor how the app is performing.
You can also send the simulation data to <a href="https://github.com/excilys/gatling/wiki/Graphite">Graphite</a> which gives you live statistics.</p>

<h4>Integration with other tools and IDEs</h4>

<p>Gatling integrates with other tools of your choice (which supports scala) like <a href="https://github.com/excilys/gatling/wiki/Maven-plugin">maven</a> and eclipse (or Intelli J) to integrate with your daily workflow. Thus, you don’t have to use another tool to load test your app. There is also a <a href="https://github.com/excilys/gatling/wiki/Jenkins-Plugin">Jenkins plugin</a> available.</p>

<h4>Underlying Technologies</h4>

<p>Gatling uses <a href="http://en.wikipedia.org/wiki/Actor_model">actor model</a> and doesn’t require 1 thread per user like <a href="http://jmeter.apache.org/">JMeter</a>. This is one of the main reasons that JMeter tends to choke on a high load scenario.</p>

<p>Gatling is built on <a href="http://akka.io/">Akka actors</a> to handle large-scale tests and Scala’s DSL capability to build clean and simple scripts. It also uses <a href="https://github.com/AsyncHttpClient/async-http-client">asynchronous http client</a> and non-blocking IO libraries (<a href="http://netty.io/">Netty</a>, <a href="http://grizzly.java.net/">Grizzly</a>).</p>

<h4>Conclusion</h4>

<p>Gatling is definitely a nice tool to have under your belt. Check out their <a href="https://github.com/excilys/gatling/wiki">wiki</a> and <a href="https://github.com/excilys/gatling">soucecode</a>. It has great documentation.</p>

<p>Thanks to <a href="https://twitter.com/whittierta">@whittierta</a> for proofreading and suggestions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Browser Cache: How ETags works in Rails 3 and Rails 4]]></title>
    <link href="http://mohanraj-nagasamy.github.io/blog/2014/02/22/browser-cache-how-etags-works-in-rails-3-and-rails-4/"/>
    <updated>2014-02-22T15:39:52-07:00</updated>
    <id>http://mohanraj-nagasamy.github.io/blog/2014/02/22/browser-cache-how-etags-works-in-rails-3-and-rails-4</id>
    <content type="html"><![CDATA[<p>Entity tags (ETags) are a mechanism that web/application servers and browsers use to determine whether the entity or component (images, scripts, stylesheets, page content etc) in the browser&rsquo;s cache matches the one on the origin server.</p>

<!-- more -->


<p>Rails 3 and Rails 4 uses ETags by default and let’s look at how they work first:</p>

<p><img class="center" src="/images/posts/etags-rails-3-and-rails-4.png" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Lets say you are going to a blog website and requesting a list of posts:</p>

<ul>
<li>First Request:

<ul>
<li>Browser makes the initial first request</li>
</ul>
</li>
<li>First Response:

<ul>
<li>Rails creates response body</li>
<li>Rails creates ETag</li>
<li>Rails responds with ETag header, status code 200</li>
</ul>
</li>
</ul>


<p>The browser caches the response now. When the browser makes subsequent request, here is the flow:</p>

<ul>
<li>Subsequent Request:

<ul>
<li>Browser makes request with header ‘If-None-Matched’ with ETag value from the initial request.</li>
</ul>
</li>
<li>Subsequent Response:

<ul>
<li>Rails creates body and creates ETag</li>
<li>Compares ETag value with ‘If-None-Matched’ value</li>
<li>If ETag match then response body is not included in response and returns with 304 Not Modified status</li>
<li>If ETag doesn’t match then body is included in the response and ETags are included in header</li>
</ul>
</li>
</ul>


<h4>Advantage</h4>

<p>So what’s the advantage when ETag matches with the one on the server? The Rails doesn’t send the body content as part of the response. So the response is small and fast to travel on the network. The browser loads the contents from the browser cache instead which makes website faster.</p>

<h5>Enable ETag</h5>

<p>So what you have to do to enable ETag chache? Nothing. You don’t have to do anything to take advantage of ETag cache.</p>

<p>The below code uses Rails default ETag cache:</p>

<p>``` ruby</p>

<p>class PostsController &lt; ApplicationController
def show</p>

<pre><code>@post = Post. find(params[:id])

respond_to do |format|
  format.html # show.html.erb
  format.json { render json: @post }
end
</code></pre>

<p>  end</p>

<p>  def edit</p>

<pre><code>@post = Post.find(params[:id])
</code></pre>

<p>  end</p>

<p>end</p>

<p>```</p>

<p>So how do rails generate ETags? Well, it will render the response and generates the ETags from the response body.
The code may look like something like this in rails:</p>

<p><code>
headers['ETag'] = Digest::MD5.hexdigest(body)
</code></p>

<h4>Custom ETags</h4>

<p>It is not a good idea to process the entire response body everytime to generate ETag. Generating entire response body involves calling the DB to fetch all the related data and processing html templates and partial page renderings. This is a costly process.
How do you solve this issue? You have fresh_when and stale? rails cache helper come in handy to rescue you.</p>

<p>The code will look like this with fresh_when and stale?:</p>

<p>``` ruby
class PostsController &lt; ApplicationController
  def show</p>

<pre><code>@post = Post. find(params[:id])
if stale? @post
  respond_to do |format|
    format.html # show.html.erb
    format.json { render json: @post }
  end
end
</code></pre>

<p>  end</p>

<p>  def edit</p>

<pre><code>@post = Post.find(params[:id])
fresh_when @post
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>So how do rails generate ETags now? The code may look like something like this in rails for stale? and fresh_when helpers:</p>

<p><code>
headers['ETag'] = Digest::MD5.hexdigest(@post.cache_key)
</code></p>

<p>Cache_key is combination of <code>model_name/model.id-model.updated_at</code>. It will be like this for Post model: <code>post/123-201312121212</code></p>

<h5>When do you use fresh_when and stale? cache helper and what’s difference?</h5>

<p>If you have special response processing like the one in show method, then use stale? helper. If you don’t have any special response processing like the one in edit method and using default-rendering mechanism (i.e. you’re not using respond_to or calling render yourself) then use fresh_when.</p>

<h4>Customize ETag generation</h4>

<p>If you cache based on <code>current_user or current_customer</code>, you can pass multiple arguments to generate ETag. The arguments have to be a Hash.</p>

<p>The sample code will look like:</p>

<p>``` ruby
class PostsController &lt; ApplicationController
  def show</p>

<pre><code>@post = Post. find(params[:id])
if stale? @post, current_user_id: current_user.id
  respond_to do |format|
    format.html # show.html.erb
    format.json { render json: @post }
  end
end
</code></pre>

<p>  end</p>

<p>  def edit</p>

<pre><code>@post = Post.find(params[:id])
fresh_when @post, current_user_id: current_user.id
</code></pre>

<p>  end</p>

<p>  def recent</p>

<pre><code>@post = Post.find(params[:id])
fresh_when @post, current_user_id: current_user.id
</code></pre>

<p>  end</p>

<p>end
```</p>

<h4>Rails 4</h4>

<p>When look at edit and recent methods, there are some repetitions. How do we DRY it up? That’s when Rails 4 declarative ETags comes into play.</p>

<p>Rails 3 and Rails 4 uses ETags by default for browser caching. But Rails 4 has a feature called declarative ETags, which allows you to add additional controller-wide information when generating an ETag.</p>

<p>Let’s look at how to apply Rails 4 declarative ETags to the above code:</p>

<p>``` ruby
class PostsController &lt; ApplicationController
etag { current_user.id }
  def show</p>

<pre><code>@post = Post. find(params[:id])
if stale? @post
  respond_to do |format|
    format.html # show.html.erb
    format.json { render json: @post }
  end
end
</code></pre>

<p>  end</p>

<p>  def edit</p>

<pre><code>@post = Post.find(params[:id])
fresh_when @post
</code></pre>

<p>  end</p>

<p>  def recent</p>

<pre><code>@post = Post.find(params[:id])
fresh_when @post
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>You can have multiple declarative ETags like this:</p>

<p><code>ruby
class PostsController &lt; ApplicationController
  etag { current_user.id }
  etag { current_customer.id }
.
.
.
end
</code></p>

<p>You can have conditions inside declarative ETags like this one to run them only on certain actions:</p>

<p>``` ruby
class PostsController &lt; ApplicationController
  etag do</p>

<pre><code>{ current_user_id: current_user.id } if %w(show edit).include? params[:action]
</code></pre>

<p>  end
end
```</p>

<p>Declarative ETags doesn’t support :only, :if options yet like one we have on before_filter/before_action or after_filer/after_action to run call back only on certain actions.</p>

<h4>Resouces</h4>

<ul>
<li><a href="http://blog.remarkablelabs.com/2012/12/generate-controller-wide-etags-rails-4-countdown-to-2013">http://blog.remarkablelabs.com/2012/12/generate-controller-wide-etags-rails-4-countdown-to-2013</a></li>
<li><a href="http://www.upgradingtorails4.com/">http://www.upgradingtorails4.com/</a></li>
<li><a href="http://guides.rubyonrails.org/caching_with_rails.html">http://guides.rubyonrails.org/caching_with_rails.html</a></li>
<li><a href="https://devcenter.heroku.com/articles/http-caching-ruby-rails#conditional-cache-headers">https://devcenter.heroku.com/articles/http-caching-ruby-rails#conditional-cache-headers</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
