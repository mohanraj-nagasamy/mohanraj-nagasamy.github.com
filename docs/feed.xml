<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-01-16T13:12:34-06:00</updated><id>/feed.xml</id><title type="html">mohanraj nagasamy</title><subtitle></subtitle><author><name>mohanraj nagasamy</name></author><entry><title type="html">Book review notes: Monolith to Microservices</title><link href="/2014/09/08/book-review-notes-monolith-to-microservices.html" rel="alternate" type="text/html" title="Book review notes: Monolith to Microservices" /><published>2014-09-08T16:29:30-05:00</published><updated>2014-09-08T16:29:30-05:00</updated><id>/2014/09/08/book-review-notes-monolith-to-microservices</id><content type="html" xml:base="/2014/09/08/book-review-notes-monolith-to-microservices.html">&lt;p&gt;Evolutionary Patterns to Transform your Monolith - an honest appraisal of the challenges associated with microservice architecture, and help you understand whether starting this journey is even right for you.&lt;/p&gt;

&lt;p&gt;It covers from domain-driven design to organizational change model - vital underpinnings that will stand you in good stead even if you decide not to adopt a microservice architecture.&lt;/p&gt;

&lt;h1 id=&quot;chapter1---just-enough-microservices&quot;&gt;CHAPTER:1 - Just Enough Microservices&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Have a common, shared understanding about what microservice architectures are.&lt;/li&gt;
  &lt;li&gt;Address some common misconceptions as well as nuances that often missed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-are-microservices&quot;&gt;What Are Microservices?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Independently deployable&lt;/strong&gt; services modeled around &lt;strong&gt;a business domain&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Expose business capability via well defined &lt;strong&gt;API interface&lt;/strong&gt; - contract.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Encapsulate inner-working&lt;/strong&gt; of the business capability and its data storage and retrieval.&lt;/li&gt;
  &lt;li&gt;Less cross-service changes as infrequent as possible.&lt;/li&gt;
  &lt;li&gt;Service should decide what is shared and what is hidden.&lt;/li&gt;
  &lt;li&gt;End-to-end slice of a business functionality.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;independent-deployability&quot;&gt;Independent Deployability&lt;/h4&gt;
&lt;h4 id=&quot;modeled-around-a-business-domain&quot;&gt;Modeled Around a Business Domain&lt;/h4&gt;
&lt;h4 id=&quot;own-their-own-data&quot;&gt;Own Their Own Data&lt;/h4&gt;

&lt;h4 id=&quot;what-advantages-can-microservices-bring&quot;&gt;What Advantages Can Microservices Bring?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Independent nature of deployment opens up new model for improving the scale and robustness of system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;what-problems-do-they-create&quot;&gt;What Problems Do They Create?&lt;/h4&gt;
&lt;h4 id=&quot;user-interfaces&quot;&gt;User Interfaces&lt;/h4&gt;
&lt;h4 id=&quot;technology&quot;&gt;Technology&lt;/h4&gt;
&lt;h4 id=&quot;size&quot;&gt;Size&lt;/h4&gt;
&lt;h4 id=&quot;and-ownership&quot;&gt;And Ownership&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Reducing services that are shared across multiple teams is key to minimizing &lt;strong&gt;delivery contention&lt;/strong&gt; - Business Oriented microservice architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-monolith&quot;&gt;The Monolith&lt;/h2&gt;
&lt;p&gt;Kinds:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The Single Process Monolith&lt;/li&gt;
  &lt;li&gt;The Distributed Monolith&lt;/li&gt;
  &lt;li&gt;Third-Party Black-Box Systems&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;challenges-of-monoliths&quot;&gt;Challenges of Monoliths&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Delivery contention&lt;/li&gt;
  &lt;li&gt;Confused lines of ownership&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;advantages-of-monoliths&quot;&gt;Advantages of Monoliths&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Simpler end-to-end testing&lt;/li&gt;
  &lt;li&gt;Single place to monitor and troubleshoot&lt;/li&gt;
  &lt;li&gt;Simplify code reuse&lt;/li&gt;
  &lt;li&gt;Monolith is synonymous with legacy - this is a problem.&lt;/li&gt;
  &lt;li&gt;It is valid option - like microservice&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;on-coupling-and-cohesion&quot;&gt;On Coupling and Cohesion&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Understand the balancing forces between coupling and cohesion&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cohesion&quot;&gt;Cohesion&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;How we group related code.&lt;/li&gt;
  &lt;li&gt;The code that changes together, stays together&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;coupling&quot;&gt;Coupling&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;How changing one thing requires a change in another&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Information Hiding, like dieting, is somewhat more easily described than done. &lt;br /&gt;
-David Parnas, The Secret History Of Information Hiding&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&quot;implementation-coupling&quot;&gt;Implementation coupling&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;A is coupled to B in teams of how B is implemented - when the implementation of B changes, A also changes.&lt;/li&gt;
  &lt;li&gt;A classic and common example of implementation coupling comes in the form of sharing database.&lt;/li&gt;
  &lt;li&gt;The act of hiding a database behind &lt;em&gt;well-defined service interface&lt;/em&gt; allows the service to limit the scope what is exposed and can allow us change how this data is represented.&lt;/li&gt;
  &lt;li&gt;Outside-in thinking: to help service interface design.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;temporal-coupling&quot;&gt;Temporal coupling&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;Key challenges of synchronous calls in a distributed environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;deployment-coupling&quot;&gt;Deployment coupling&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;Everything must be deployed together&lt;/li&gt;
  &lt;li&gt;Deploying something comes with risk.&lt;/li&gt;
  &lt;li&gt;Small releases make for less risk - there is less to go wrong.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;domain-coupling&quot;&gt;Domain coupling&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;Fundamentally, In a system that consists of multiple independent services, there has to be some interaction between participants.&lt;/li&gt;
  &lt;li&gt;In microservice architecture, domain coupling is the result.&lt;/li&gt;
  &lt;li&gt;We can’t avoid the domain coupling. But we still aim to reduce the level of coupling&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;just-enough-domain-driven-design&quot;&gt;Just Enough Domain-Driven Design&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Programs better represent the real world.&lt;/li&gt;
  &lt;li&gt;Helps us better represent the problem domain in our programs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;aggregate&quot;&gt;Aggregate&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Representation of a real domain concept&lt;/li&gt;
  &lt;li&gt;Typically have a life-cycle around them&lt;/li&gt;
  &lt;li&gt;Self contained unit&lt;/li&gt;
  &lt;li&gt;There are lots of ways to break system - some choices being highly subjective.
    &lt;ol&gt;
      &lt;li&gt;Performance reason&lt;/li&gt;
      &lt;li&gt;Easy of implementation&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;bounded-context&quot;&gt;Bounded Context&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Represent a large organizational boundary within an organization.&lt;/li&gt;
  &lt;li&gt;Hide implementation detail.&lt;/li&gt;
  &lt;li&gt;Contain one or more aggregates&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;mapping-aggregate-and-bounded-contexts-to-microservices&quot;&gt;Mapping Aggregate and Bounded Contexts to Microservices&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;They both give us unit of cohesion with well-defined interfaces with the wider system.&lt;/li&gt;
  &lt;li&gt;Works well as service boundary.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://bit.ly/2oeICgL&quot;&gt;“Contempt Culture” blog post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;For an overview of Shopify’s thinking behind the use of a modular monolith rather than microservices, Kirsten Westeinde’s &lt;a href=&quot;http://bit.ly/2oauZ29&quot;&gt;talk on YouTube&lt;/a&gt; has some useful insights.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;chapter2---planning-a-migration&quot;&gt;CHAPTER:2 - Planning a Migration&lt;/h1&gt;
&lt;h2 id=&quot;understanding-the-goal&quot;&gt;Understanding the Goal&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Microservices are not the goal. You don’t “win” by having microservices.&lt;/li&gt;
  &lt;li&gt;Think of migrating to microservices architecture in order achieve something that you can’t currently achieve with your existing system architecture.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;three-key-questions&quot;&gt;Three Key Questions&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;What are you hoping to achieve?&lt;/li&gt;
  &lt;li&gt;Have you considered alternatives to microservices architecture&lt;/li&gt;
  &lt;li&gt;How will you know if the transition is working?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-might-you-choose-microservices&quot;&gt;Why Might You Choose Microservices?&lt;/h2&gt;

&lt;p class=&quot;box-note&quot;&gt;&lt;strong&gt;But There are other ways you could potentially use to achieve these same outcomes using different approaches.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;improve-team-autonomy&quot;&gt;Improve Team Autonomy&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;Whatever industry you operate in, it is all about your people, and catching them doing things right, and providing them with the confidence, the motivations, the freedom and desire to achieve their true potential. &lt;br /&gt;
     -John Timpson&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;• Distribution of responsibility 
• Self-service approach - not having to wait for people to do things for you.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;reduce-time-to-market&quot;&gt;Reduce Time to Market&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Path-to-production&lt;/strong&gt; modeling exercise - speed up the delivery of software.&lt;/li&gt;
  &lt;li&gt;Think of all the steps involved with shipping software.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;scale-cost-effectively-for-load&quot;&gt;Scale Cost-Effectively for Load&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Scale up only parts of the processing that are currently constraining our ability to handle load.&lt;/li&gt;
  &lt;li&gt;Look for bottlenecks&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;• Look at public cloud - a quick short-term improvements, it shouldn't be dismissed outright.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;improve-robustness&quot;&gt;Improve Robustness&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;An impact on one area of the functionality need not bring down the whole system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;box-note&quot;&gt;&lt;strong&gt;Resilience:&lt;/strong&gt; When we want to improve a system’s ability to avoid outages, handing failures gracefully when they occur, and recover quickly when problems happen&lt;/p&gt;

&lt;h4 id=&quot;scale-the-number-of-developers&quot;&gt;Scale the Number of Developers&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;We can scale the number of developers by reducing the delivery contention.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;box-note&quot;&gt;To successfully scale number of developer we bring to bear on the problem requires a good regress of &lt;strong&gt;autonomy&lt;/strong&gt; between the teams themselves - just having microservices not going to be enough&lt;/p&gt;

&lt;h4 id=&quot;embrace-new-technology&quot;&gt;Embrace New Technology&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;The flexibility is being able to try new technology in a safe way can give them competitive advantage - both in terms of delivering better results for customer and in helping keep developers happy as they master new skills.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;box-note&quot;&gt;&lt;strong&gt;Reuse?&lt;/strong&gt; &lt;br /&gt;
	• Reuse is one of the most opt-stated goals for microservices migration - a poor goal in the first place. &lt;br /&gt;
	• May not always be the right answer. If your actual goal is faster time to market, writing our own implementation much faster and ship the feature to the customer more quickly than spend the time to adapt the existing code. &lt;br /&gt;
	• Spend time focusing on the actual objective.&lt;br /&gt;
	• If you optimize for reuse hoping you get faster time to market, you may end up doing things that slow you down.&lt;/p&gt;

&lt;h2 id=&quot;when-might-microservices-be-a-bad-idea&quot;&gt;When Might Microservices Be a Bad Idea?&lt;/h2&gt;
&lt;h4 id=&quot;unclear-domain&quot;&gt;Unclear Domain&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Having an existing codebase you want to decompose into microservices is much easier than trying to go to microservices from the beginning.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;startups&quot;&gt;Startups&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;It is much easier to partition an existing “brownfield” system than to do so up front with a new, greenfield system that a startup would create.&lt;/li&gt;
  &lt;li&gt;Only split around those boundaries that are clear at the beginning and keep the rest on the more monolith side.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;trade-offs&quot;&gt;Trade-Offs&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Separate the core driver behind the shift from any secondary benefits you might also like to achieve.
    &lt;ul&gt;
      &lt;li&gt;Some things are more important than others.&lt;/li&gt;
      &lt;li&gt;Slider exercise - change priorities as you learn more.
        &lt;ul&gt;
          &lt;li&gt;Scale to handle increasing numbers of customers&lt;/li&gt;
          &lt;li&gt;Improve team autonomy&lt;/li&gt;
          &lt;li&gt;Bring in new programming language&lt;/li&gt;
          &lt;li&gt;Decrease system downtime&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;taking-people-on-the-journey&quot;&gt;Taking People on the Journey&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;When people disagree about an approach, its because they may have different view of what you are trying to achieve.&lt;/li&gt;
  &lt;li&gt;You need to bring other people on the journey with you - have a shared understanding about what you are trying to achieve.&lt;/li&gt;
  &lt;li&gt;If all in the organization share the same goal, they are much more likely to be onboard for making a change.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;changing-organizations&quot;&gt;Changing Organizations&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Establishing a Sense of Urgency&lt;/li&gt;
  &lt;li&gt;Creating the Guiding Coalition&lt;/li&gt;
  &lt;li&gt;Developing a Vision and Strategy&lt;/li&gt;
  &lt;li&gt;Communicating the Change Vision&lt;/li&gt;
  &lt;li&gt;Empowering Employees for Broad-Based Action&lt;/li&gt;
  &lt;li&gt;Generating Short-Term Wins&lt;/li&gt;
  &lt;li&gt;Consolidating Gains and Producing More Change&lt;/li&gt;
  &lt;li&gt;Anchoring New Approaches in the Culture&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;importance-of-incremental-migration&quot;&gt;Importance of Incremental Migration&lt;/h2&gt;

&lt;blockquote class=&quot;box-warning&quot;&gt;
  &lt;p&gt;If you do a big-bang rewrite, the only thing you’re guaranteed of is a big bang. &lt;br /&gt;
-Martin Fowler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;cost-of-change&quot;&gt;Cost of Change&lt;/h2&gt;
&lt;h2 id=&quot;so-where-do-we-start&quot;&gt;So Where Do We Start?&lt;/h2&gt;
&lt;h2 id=&quot;domain-driven-design&quot;&gt;Domain-Driven Design&lt;/h2&gt;
&lt;h2 id=&quot;a-combined-model&quot;&gt;A Combined Model&lt;/h2&gt;
&lt;h2 id=&quot;reorganizing-teams&quot;&gt;Reorganizing Teams&lt;/h2&gt;
&lt;h2 id=&quot;how-will-you-know-if-the-transition-is-working&quot;&gt;How Will You Know if the Transition Is Working?&lt;/h2&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;</content><author><name>mohanraj nagasamy</name></author><category term="Book-Review" /><category term="Architecture" /><summary type="html">Evolutionary Patterns to Transform your Monolith - an honest appraisal of the challenges associated with microservice architecture, and help you understand whether starting this journey is even right for you.</summary></entry><entry><title type="html">Panamax template for couchbase 5 node cluster</title><link href="/2014/09/08/panamax-template-for-couchbase-5-node-cluster.html" rel="alternate" type="text/html" title="Panamax template for couchbase 5 node cluster" /><published>2014-09-08T16:29:30-05:00</published><updated>2014-09-08T16:29:30-05:00</updated><id>/2014/09/08/panamax-template-for-couchbase-5-node-cluster</id><content type="html" xml:base="/2014/09/08/panamax-template-for-couchbase-5-node-cluster.html">&lt;p&gt;Panamax is Docker Management for Humans. You can get started with the simple steps described &lt;a href=&quot;http://panamax.io/get-panamax/&quot;&gt;here&lt;/a&gt;. It provides a friendly interface for users of Docker, Fleet &amp;amp; CoreOS. With Panamax, you can easily create, share, and deploy any containerized app no matter how complex it might be. You can linking (or stitching them) different docker images together and exposing them to the outside world. You can start and stop docker containers everything within Panamax web UI.&lt;/p&gt;

&lt;p&gt;I have created a “Panamax template for couchbase 5 node cluster”. Let’s see how simple it is to set up the cluster.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Most of the steps taken from &lt;a href=&quot;http://blog.abhinav.ca/blog/2014/07/31/kickstart-a-couchbase-cluster-with-docker&quot;&gt;here&lt;/a&gt;. I just made a Panamax template.&lt;/p&gt;

&lt;h4 id=&quot;step-1--login-into-coreos&quot;&gt;Step 1 : Login into coreOS&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;panamax ssh&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;step-2-run-the-below-command-from-coreos&quot;&gt;Step 2: Run the below command from coreOS&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker ps&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for name in dustin_couchbase_{1..4}; do docker inspect -f '.NetworkSettings.IPAddress' $name; done&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It will give you 4 IP address:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;  &lt;span class=&quot;mf&quot;&gt;172.17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;36.140&lt;/span&gt;
  &lt;span class=&quot;mf&quot;&gt;172.17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;36.139&lt;/span&gt;
  &lt;span class=&quot;mf&quot;&gt;172.17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;36.142&lt;/span&gt;
  &lt;span class=&quot;mf&quot;&gt;172.17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;36.141&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;step-3-open-a-new-terminal-and-run-all-these-commands-in-the-host-os-where-your-virtual-box-running&quot;&gt;Step 3: Open a new terminal and run all these commands in the host OS (where your Virtual box running)&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VboxManage controlvm panamax-vm natpf1 rule1,tcp,,8091,,8091&lt;/code&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VboxManage controlvm panamax-vm natpf1 rule2,tcp,,8092,,8092&lt;/code&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VboxManage controlvm panamax-vm natpf1 rule3,tcp,,11210,,11210&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: If you are not clear why you have to do this, here is the &lt;a href=&quot;https://github.com/CenturyLinkLabs/panamax-ui/wiki/How-To%3A-Port-Forwarding-on-VirtualBox&quot;&gt;Panamax wiki&lt;/a&gt; that explains in detail.&lt;/p&gt;

&lt;h4 id=&quot;step-4-go-to-couchbase-admin-web-console&quot;&gt;Step 4: Go to (couchbase admin web console)&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:8091/&quot;&gt;http://localhost:8091/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Login with &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Username:&lt;/code&gt; Administrator &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Password:&lt;/code&gt; password&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;step-5-go-to-server-nodes&quot;&gt;Step 5: Go to “Server Nodes”&lt;/h4&gt;
&lt;p&gt;Add servers by IP address (Ref# Step: 2)&lt;/p&gt;

&lt;h3 id=&quot;more-resources-to-follow&quot;&gt;More resources to follow:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/panamax_io&quot;&gt;Twitter @panamax_io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://panamax.io/documentation/&quot;&gt;panamax documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/CenturyLinkLabs/panamax-ui/wiki&quot;&gt;panamax wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=15IKkYCfymk&quot;&gt;Installing Panamax videos&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/cardmagic&quot;&gt;https://twitter.com/cardmagic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/cardmagic/introduction-to-panamax-from-century-link&quot;&gt;Introduction to Panamax from CenturyLink&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>mohanraj nagasamy</name></author><category term="Panamax" /><category term="Docker" /><summary type="html">Panamax is Docker Management for Humans. You can get started with the simple steps described here. It provides a friendly interface for users of Docker, Fleet &amp;amp; CoreOS. With Panamax, you can easily create, share, and deploy any containerized app no matter how complex it might be. You can linking (or stitching them) different docker images together and exposing them to the outside world. You can start and stop docker containers everything within Panamax web UI.</summary></entry><entry><title type="html">Utah Code Camp 2014: Notes</title><link href="/2014/03/18/utah-code-camp-2014-notes.html" rel="alternate" type="text/html" title="Utah Code Camp 2014: Notes" /><published>2014-03-18T16:54:41-05:00</published><updated>2014-03-18T16:54:41-05:00</updated><id>/2014/03/18/utah-code-camp-2014-notes</id><content type="html" xml:base="/2014/03/18/utah-code-camp-2014-notes.html">&lt;p&gt;I went to &lt;a href=&quot;http://utahcodecamp.com/&quot;&gt;Utah Code Camp 2014&lt;/a&gt;. It has happened at the University of Utah with more than 850 attendees. The organizers were awesome as always. They planned 13 concurrent tracks with &lt;a href=&quot;/assets/posts/UTCCschedule2014.pdf&quot;&gt;a great schedule &lt;/a&gt; this time.&lt;/p&gt;

&lt;p&gt;I want to capture some notes from the sessions I went to.&lt;/p&gt;

&lt;h4 id=&quot;conceptual-data-modeling-by-tyler-young&quot;&gt;Conceptual Data Modeling by &lt;em&gt;Tyler Young&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Tyler talked about the ORM tool - this not the &lt;a href=&quot;http://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;tool&lt;/a&gt; you are thinking of. It is about &lt;a href=&quot;http://www.ormfoundation.org/&quot;&gt;object-role modeling &lt;/a&gt; and how you can use this tool to do modeling and generate ER diagrams and SQLs for different DBs.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ormfoundation.org/files/10/default.aspx&quot;&gt;Norma&lt;/a&gt; - plugin for visual studio&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dataconstellation.com/ActiveFacts/index.shtml&quot;&gt;ActiveFacts&lt;/a&gt; - Ruby implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;introduction-to-hbase-by-giri-vislawath&quot;&gt;Introduction to HBase by &lt;em&gt;Giri Vislawath&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Giri talked about the HBase overview. &lt;a href=&quot;/assets/posts/introduction_to_hbase.pptx&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;building-web-apps-with-nodejs-by-scott-hillman&quot;&gt;Building web apps with node.js by &lt;em&gt;Scott Hillman&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Scott went over Node.js’s event loop model. And explained why it is not good for CPU-bound intensive tasks but it is great for IO-bound tasks.
Talked about npm. And why there is only one package manager (because they are awesome and no one wants yet another one).&lt;/p&gt;

&lt;p&gt;Talked about node developer workflow with tools like &lt;a href=&quot;http://nodemon.io/&quot;&gt;nodemon&lt;/a&gt; and &lt;a href=&quot;https://github.com/isaacs/node-supervisor&quot;&gt;node-supervisor&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;machine-learning-the-easy-way-with-weka-by-alton-alexander&quot;&gt;Machine Learning the easy way with Weka by &lt;em&gt;Alton Alexander&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cs.waikato.ac.nz/ml/weka/&quot;&gt;Weka&lt;/a&gt; is a tool that will give you easy and fast ML results. Programmed with all of the common ML algorithms, you can start to impress fast!. He went over the Weka tool GUI and some of the ML algorithms.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Wake has been used by Pentaho for their &lt;a href=&quot;http://community.pentaho.com/projects/data-mining/&quot;&gt;data mining&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.pentaho.com/display/DATAMINING/Handling+Large+Data+Sets+with+Weka&quot;&gt;Handling Large Data Sets with Weka&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.pentaho.com/display/DATAMINING/Data+Mining+Algorithms+and+Tools+in+Weka&quot;&gt;Data Mining Algorithms and Tools in Weka&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;emberjs-lessons-learned-by-justin-ball&quot;&gt;Ember.js Lessons Learned by &lt;em&gt;&lt;a href=&quot;http://www.justinball.com&quot;&gt;Justin Ball&lt;/a&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;The slides are available &lt;a href=&quot;http://www.justinball.com/2014/03/12/emberjs-lessons-learned-so-far&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Underscorejs’s &lt;a href=&quot;http://underscorejs.org/#debounce&quot;&gt;debounce&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;And &lt;a href=&quot;http://underscorejs.org/#throttle&quot;&gt;throttle&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a jQuery &lt;a href=&quot;http://benalman.com/code/projects/jquery-throttle-debounce/examples/debounce/&quot;&gt;plugin&lt;/a&gt; as well.&lt;/p&gt;

&lt;h4 id=&quot;and-useful-links&quot;&gt;And useful links&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/posts/LocalUserGroupsFlyer.pdf&quot;&gt;List of local user groups&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.freelancersshow.com/&quot;&gt;devchat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;And met some Indian friends from tomax&lt;/li&gt;
&lt;/ul&gt;</content><author><name>mohanraj nagasamy</name></author><category term="Notes" /><summary type="html">I went to Utah Code Camp 2014. It has happened at the University of Utah with more than 850 attendees. The organizers were awesome as always. They planned 13 concurrent tracks with a great schedule this time.</summary></entry><entry><title type="html">Java Performance</title><link href="/2014/03/12/java-performance.html" rel="alternate" type="text/html" title="Java Performance" /><published>2014-03-12T22:20:11-05:00</published><updated>2014-03-12T22:20:11-05:00</updated><id>/2014/03/12/java-performance</id><content type="html" xml:base="/2014/03/12/java-performance.html">&lt;p&gt;Notes from &lt;a href=&quot;http://www.informit.com/store/java-performance-livelessons-video-training-downloadable-9780133443554&quot;&gt;Java Performance&lt;/a&gt; by Charlie Hunt. Reference &lt;a href=&quot;http://www.amazon.com/Java-Performance-Charlie-Hunt/dp/0137142528&quot;&gt;book&lt;/a&gt; by Charlie Hunt and Binu John.&lt;/p&gt;

&lt;h4 id=&quot;lesson-1-jvm-overview&quot;&gt;Lesson 1: JVM Overview&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;From Java 7u21, there is &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/server-jre7-downloads-1931105.html&quot;&gt;server JRE&lt;/a&gt; available for UNIX 64 bit OSes. It has got everything JDK has, except no browser plug-in, no auto-updater.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Understand the major components of a modern Java Virtual Machine
    &lt;ul&gt;
      &lt;li&gt;HotSpot VM runtime&lt;/li&gt;
      &lt;li&gt;Garbage collector/ memory manager
        &lt;ul&gt;
          &lt;li&gt;Generational GC - it partitions the Java heap into two or more regions/generations
            &lt;ul&gt;
              &lt;li&gt;Young vs Old&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Permanent Generation - Holds class data structures
            &lt;ul&gt;
              &lt;li&gt;In Java 8 - it has been eliminated in favor of a meta-space&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;JIT Compiler
        &lt;ul&gt;
          &lt;li&gt;Generates native byte code&lt;/li&gt;
          &lt;li&gt;Client mode&lt;/li&gt;
          &lt;li&gt;Server mode&lt;/li&gt;
          &lt;li&gt;Tiered - Default In Java 8 - enabled via -XX:+TieredCompilation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Runtime subsystem
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+PrintFlagsFinal&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+PrintGCDetails&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Understand the memory management garbage collection (GC) subsystem
    &lt;ul&gt;
      &lt;li&gt;jvisualvm
        &lt;ul&gt;
          &lt;li&gt;Install plug-in visual GC&lt;/li&gt;
          &lt;li&gt;Install memory-pool plug-in from &lt;a href=&quot;https://java.net/projects/memorypoolview&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;Once objects reaches 15 max tenuring, will promoted to old gen space&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://code.google.com/p/hatter-source-code/wiki/jtop&quot;&gt;jTop&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;JIT compiler subsystem
        &lt;ul&gt;
          &lt;li&gt;
            &lt;h2 id=&quot;look-at-code-cache-from-memory-pool-plug-in-for-jit-compilation&quot;&gt;Look at code cache from memory-pool plug-in for JIT compilation&lt;/h2&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;lesson-2-collecting-performance-statistics&quot;&gt;Lesson 2: Collecting Performance Statistics&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Understand the importance of a methodology&lt;/li&gt;
  &lt;li&gt;Understand which operating system metrics to monitor
    &lt;ul&gt;
      &lt;li&gt;Understand which operating system metrics to monitor: Monitor metrics on Windows.
  You can monitoring CPU, Memory, Network:
        &lt;ol&gt;
          &lt;li&gt;GUI Tool: Performance Monitor&lt;/li&gt;
          &lt;li&gt;CMD Tool: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typeperf&lt;/code&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Understand which operating system metrics to monitor: Monitor metrics on Linux
        &lt;ol&gt;
          &lt;li&gt;GUI Tool: System Monitory in Ubuntu
            &lt;ul&gt;
              &lt;li&gt;CMD tool: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vm_stat&lt;/code&gt; &lt;interval&gt;
      `mpstat -P ALL`
      `top`&lt;/interval&gt;&lt;/li&gt;
              &lt;li&gt;Monitor the CPU Scheduler Run Queue
 use vmstat to monitor run queue&lt;/li&gt;
              &lt;li&gt;Monitor High Voluntary Context Switching&lt;/li&gt;
            &lt;/ul&gt;
            &lt;ul&gt;
              &lt;li&gt;Can indicate Java application that is experiencing lock contention
                &lt;ul&gt;
                  &lt;li&gt;Makes it difficult in scaling&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pidstat&lt;/code&gt; to monitor (need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysstat&lt;/code&gt; package required)	
  ex: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pidstat -w -I -t -p &amp;lt;pid&amp;gt; &amp;lt;interval&amp;gt;&lt;/code&gt;
  Monitor network
 use nicstat
  Monitor disk/io
 use iostat&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Understand what JVM metrics to monitor
    &lt;ul&gt;
      &lt;li&gt;Important JVM metrics:&lt;/li&gt;
      &lt;li&gt;Garbage collection:
  Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PrintGCDetails&lt;/code&gt; to log gc details
  you can also use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+PrintGCDateStamps&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+PrintGCTimeStamps&lt;/code&gt; - gives point and time when the gc has occurred
  use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Xloggc=/somepath/gc.log&lt;/code&gt; - to log gc log&lt;/li&gt;
      &lt;li&gt;Monitor app exectution time and stopped time
        &lt;ul&gt;
          &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+PrintGCApplicationStoppedTime&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+PrintApplicationConcurrentTime&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Other to consider but not necessarily required
        &lt;ul&gt;
          &lt;li&gt;JIT compilation: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+PrintCompilation&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+PrintInlining&lt;/code&gt; - these flags are not generally used.&lt;/li&gt;
          &lt;li&gt;Fine tune JVM heap space sizes: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+PrintTenuringDistribution&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PrintAdaptiveSizePolicy&lt;/code&gt; (Paraller GC or G1 only)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Remote monitoring using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jstatd&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Requires a security manager and security policy file&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;App level metrics to monitor:
        &lt;ul&gt;
          &lt;li&gt;Begin and end time of a transaction&lt;/li&gt;
          &lt;li&gt;Observing app level JMX MBeans especially those that offer performance information&lt;/li&gt;
          &lt;li&gt;Java EE container stats:
            &lt;ul&gt;
              &lt;li&gt;Available JDBC connections&lt;/li&gt;
              &lt;li&gt;Active/Available Threads&lt;/li&gt;
              &lt;li&gt;Request arrival rate&lt;/li&gt;
              &lt;li&gt;Request response times&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;h2 id=&quot;build-app-level-stats-via-mbeans-example-is-on-the-book&quot;&gt;Build App level stats via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MBeans&lt;/code&gt;. Example is on the book.&lt;/h2&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;lesson-3-understand-hotspot-jvm-gc-logs&quot;&gt;Lesson 3: Understand HotSpot JVM GC Logs&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Understand how Parallel GC works
    &lt;ul&gt;
      &lt;li&gt;Understand Parallel GC logs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Understand how CMS GC works
    &lt;ul&gt;
      &lt;li&gt;Understand CMS GC logs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Understand how G1 GC works
    &lt;ul&gt;
      &lt;li&gt;Understand G1 GC logs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;All of them produces totally different information&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;lesson-4-tune-the-hotspot-jvm-step-by-step&quot;&gt;Lesson 4: Tune the HotSpot JVM Step-by-Step&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Create a plan of attack
    &lt;ul&gt;
      &lt;li&gt;Throughput vs Latency vs Footprint&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Understand the step-by-step process&lt;/li&gt;
  &lt;li&gt;Determine memory footprint size&lt;/li&gt;
  &lt;li&gt;Tune for latency/responsiveness: 	Tools to help visualize gc pause times: &lt;a href=&quot;https://java.net/projects/gchisto&quot;&gt;gchisto&lt;/a&gt;, &lt;a href=&quot;http://www.jclarity.com/censum/&quot;&gt;censum&lt;/a&gt; from jclarity.com&lt;/li&gt;
  &lt;li&gt;Tune for throughput: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+AggresiveOpts&lt;/code&gt; to turn on aggressive gc optimizations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;more-resources&quot;&gt;More resources:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html&quot;&gt;http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.nbl.fi/~nbl97/java/tuning/jvm_internals.pdf&quot;&gt;http://www.nbl.fi/~nbl97/java/tuning/jvm_internals.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://java.ociweb.com/mark/other-presentations/JavaGC.pdf&quot;&gt;http://java.ociweb.com/mark/other-presentations/JavaGC.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136373.html&quot;&gt;http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136373.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www-01.ibm.com/support/docview.wss?uid=swg27013456&amp;amp;aid=1&quot;&gt;http://www-01.ibm.com/support/docview.wss?uid=swg27013456&amp;amp;aid=1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://secure.trifork.com/dl/qcon-newyork-2012/slides/5.%20ExtremeJavaPerformanceQConNYC.pdf&quot;&gt;https://secure.trifork.com/dl/qcon-newyork-2012/slides/5.%20ExtremeJavaPerformanceQConNYC.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.infoq.com/articles/book-java-performance&quot;&gt;http://www.infoq.com/articles/book-java-performance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/Extreme-Performance-Java&quot;&gt;http://www.infoq.com/presentations/Extreme-Performance-Java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javaseproducts/mission-control/index.html&quot;&gt;http://www.oracle.com/technetwork/java/javaseproducts/mission-control/index.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/specs/&quot;&gt;Java Language and Virtual Machine Specifications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hatter-source-code.googlecode.com/svn/trunk/attachments/wiki/performance/linux-performance-analysis-and-tools.pdf&quot;&gt;linux-performance-analysis-and-tools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.google.com/p/hatter-source-code/wiki/Study_Java_Diagnosis&quot;&gt;Study_Java_Diagnosis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.javaperformancetuning.com/tools/index.shtml&quot;&gt;Java Performance Tuning tool reports&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://samuraism.jp/samurai/en/index.html&quot;&gt;Samurai&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://people.apache.org/~billa/oscon2012/OSCON2012TroubleShootJava.pdf&quot;&gt;OSCON2012 TroubleShoot Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would highly encourage to read the &lt;a href=&quot;http://www.amazon.com/Java-Performance-Charlie-Hunt/dp/0137142528&quot;&gt;book&lt;/a&gt; or take the &lt;a href=&quot;http://www.informit.com/store/java-performance-livelessons-video-training-downloadable-9780133443554&quot;&gt;LiveLessons&lt;/a&gt;. Charlie Hunt is awesome!&lt;/p&gt;</content><author><name>mohanraj nagasamy</name></author><category term="Performance" /><summary type="html">Notes from Java Performance by Charlie Hunt. Reference book by Charlie Hunt and Binu John.</summary></entry><entry><title type="html">Clojure Fundamentals</title><link href="/2014/03/09/clojure-fundamentals.html" rel="alternate" type="text/html" title="Clojure Fundamentals" /><published>2014-03-09T13:14:14-05:00</published><updated>2014-03-09T13:14:14-05:00</updated><id>/2014/03/09/clojure-fundamentals</id><content type="html" xml:base="/2014/03/09/clojure-fundamentals.html">&lt;p&gt;I haven’t this excited when I am learning programming languages. Clojure is a very simple and powerful Lisp dialect on JVM.&lt;/p&gt;

&lt;p&gt;You code as data in Clojure. So my personal feeling is that Lisp dialects should have been the go-to programming language to develop multi-tenant applications like &lt;a href=&quot;http://blogs.workday.com/why_workday_is_different_by_design.html&quot;&gt;Workday&lt;/a&gt;, &lt;a href=&quot;http://www.developerforce.com/media/ForcedotcomBookLibrary/Force.com_Multitenancy_WP_101508.pdf&quot;&gt;Salesforce&lt;/a&gt;. And to create rule engines. There have been some attempts made by &lt;a href=&quot;https://github.com/rbrush/clara-rules&quot;&gt;clara-rules&lt;/a&gt; and &lt;a href=&quot;https://github.com/hraberg/mimir&quot;&gt;mimir&lt;/a&gt; projects to create rule engines.
We can store the Clojure code as data in any storage (ex: DB) and read into JVM memory as the semantics and the structures remain the same. It makes Clojure so powerful and elegant to work with.&lt;/p&gt;

&lt;p&gt;I would like to list some of the resources that I used to learn Clojure.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/alandipert&quot;&gt;Alan Dipert&lt;/a&gt; has 3-hour course on &lt;a href=&quot;http://pluralsight.com/training/Courses/TableOfContents/clojure-fundamentals-part-one&quot;&gt;pluralsight&lt;/a&gt; and you find &lt;a href=&quot;http://alandipert.github.io/oscon2012-clojure&quot;&gt;course notes&lt;/a&gt; which are highly useful.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://clojure.org/cheatsheet&quot;&gt;Clojure - Cheat Sheet&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;O’Reilly’s free online &lt;a href=&quot;http://clojure-cookbook.com/&quot;&gt;Clojure Cookbook&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://learnxinyminutes.com/docs/clojure/&quot;&gt;http://learnxinyminutes.com/docs/clojure/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://adambard.com/blog/clojure-in-15-minutes/&quot;&gt;http://adambard.com/blog/clojure-in-15-minutes/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://adambard.com/blog/PHP-ruby-python-clojure-webapps-by-example/&quot;&gt;http://adambard.com/blog/PHP-ruby-python-clojure-webapps-by-example/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://clojure-notes.rubylearning.org/&quot;&gt;http://clojure-notes.rubylearning.org/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://shop.oreilly.com/product/0636920030409.do&quot;&gt;Clojure Inside Out&lt;/a&gt; and course slides are available &lt;a href=&quot;http://nealford.com/past.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>mohanraj nagasamy</name></author><category term="Clojure" /><summary type="html">I haven’t this excited when I am learning programming languages. Clojure is a very simple and powerful Lisp dialect on JVM.</summary></entry><entry><title type="html">Interesting project: Nashorn</title><link href="/2014/03/08/interesting-project-nashorn.html" rel="alternate" type="text/html" title="Interesting project: Nashorn" /><published>2014-03-08T21:57:22-06:00</published><updated>2014-03-08T21:57:22-06:00</updated><id>/2014/03/08/interesting-project-nashorn</id><content type="html" xml:base="/2014/03/08/interesting-project-nashorn.html">&lt;p&gt;I am going to cover some of the interesting or &lt;a href=&quot;http://projectodd.org&quot;&gt;odd projects&lt;/a&gt; that are being targeted to run on JVM that I came across recently in this post blog.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/e/ec/Nashorn.Aberdeen.0007wakh.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-right&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;nashorn&quot;&gt;Nashorn:&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://openjdk.java.net/projects/nashorn/&quot;&gt;Nashorn&lt;/a&gt; is an upcoming JavaScript engine, developed fully in Java 8 Language by Oracle. And &lt;a href=&quot;http://openjdk.java.net/projects/nashorn&quot;&gt;open sourced&lt;/a&gt; to OpenJDK as part of jdk8. It also validates the InvokeDynamic (&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=292&quot;&gt;JSR-292&lt;/a&gt;) feature in JDK 7; leverage all new language and JVM features in JDK 8.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;We know the existing JVM (from JDK 1.1 onwards) ships with a JavaScript engine, which is called Rhino. But the recent version of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Rhino&quot;&gt;Rhino&lt;/a&gt; has only been tested with JDK 1.4 and grater. I don’t know who in the world is using JDK 1.4 anyway.&lt;/p&gt;

&lt;h4 id=&quot;so-what-is-need-for-the-new-project&quot;&gt;So what is need for the new project?&lt;/h4&gt;

&lt;p&gt;Rhino is an old code base and developed by using old JDK. And Nashorn significantly outperforms Rhino, it may not beat &lt;a href=&quot;http://wnameless.wordpress.com/2013/12/10/javascript-engine-benchmarks-nashorn-vs-v8-vs-spidermonkey&quot;&gt;Google’s V8&lt;/a&gt;. And Nashorn implements a new &lt;a href=&quot;https://github.com/szegedi/dynalink&quot;&gt;meta-object&lt;/a&gt; protocol that simplifies calling Java APIs from JavaScript and enables seamless interactions between JavaScript and Java.  And all the &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/technotes/guides/jvmti&quot;&gt;JVM TI&lt;/a&gt; based tools such as debugging and profiling can read meta-object protocol.&lt;/p&gt;

&lt;p&gt;But the real motivation for writing a new engine to validate &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/invoke/package-summary.html&quot;&gt;InvokeDynamic&lt;/a&gt; feature, which formally opened the door to &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html&quot;&gt;support non-Java&lt;/a&gt; languages on JVM.&lt;/p&gt;

&lt;p&gt;Nashorn engine passes ECMAScript 5.1 compliance tests. You can follow &lt;a href=&quot;https://blogs.oracle.com/nashorn/&quot;&gt;Oracle’s blog&lt;/a&gt; for the updated info. It is an interesting project to checkout.&lt;/p&gt;</content><author><name>mohanraj nagasamy</name></author><category term="Nashorn" /><summary type="html">I am going to cover some of the interesting or odd projects that are being targeted to run on JVM that I came across recently in this post blog.</summary></entry><entry><title type="html">Performance test your application with Gatling</title><link href="/2014/02/23/performance-test-your-application-with-gatling.html" rel="alternate" type="text/html" title="Performance test your application with Gatling" /><published>2014-02-23T20:18:00-06:00</published><updated>2014-02-23T20:18:00-06:00</updated><id>/2014/02/23/performance-test-your-application-with-gatling</id><content type="html" xml:base="/2014/02/23/performance-test-your-application-with-gatling.html">&lt;p&gt;When you think about performance testing your application, you may think about the below picture and a tool to test.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets//images/posts/truck-load.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One open-source tool that comes to mind is &lt;a href=&quot;http://jmeter.apache.org/&quot;&gt;JMeter&lt;/a&gt;. For very simple tests, I tend to use &lt;a href=&quot;http://httpd.apache.org/docs/2.2/programs/ab.html&quot;&gt;apache benchmarking&lt;/a&gt;. But there are other tools like &lt;a href=&quot;http://grinder.sourceforge.net/&quot;&gt;Grinder&lt;/a&gt;, &lt;a href=&quot;http://www8.hp.com/us/en/software-solutions/software.html?compURI=1175451&quot;&gt;LoadRunner&lt;/a&gt;, &lt;a href=&quot;http://www.neotys.com/product/overview-neoload.html&quot;&gt;NeoLoad&lt;/a&gt;, &lt;a href=&quot;http://tsung.erlang-projects.org/&quot;&gt;Tsung&lt;/a&gt;, and &lt;a href=&quot;http://www.soapui.org/Getting-Started/load-testing.html&quot;&gt;SoapUI&lt;/a&gt; for web services testing. Then there is &lt;a href=&quot;https://code.google.com/p/caliper/&quot;&gt;Caliper&lt;/a&gt; and &lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh&quot;&gt;jmh&lt;/a&gt; for micro benchmarking, which target use cases.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h5 id=&quot;so-what-makes-gatling-different-from-other-tools-is&quot;&gt;So what makes &lt;a href=&quot;http://gatling-tool.org/&quot;&gt;Gatling&lt;/a&gt; different from other tools is:&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Usability – GUI vs Script (Code)&lt;/li&gt;
  &lt;li&gt;Maintainability&lt;/li&gt;
  &lt;li&gt;Reporting&lt;/li&gt;
  &lt;li&gt;Integration with other tools like Maven, Jenkins&lt;/li&gt;
  &lt;li&gt;Underlying Technologies&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;usability--gui-vs-script-code&quot;&gt;Usability – GUI vs Script (Code)&lt;/h4&gt;

&lt;p&gt;Using the GUI to do performance tests is difficult and unintuitive.&lt;/p&gt;

&lt;p&gt;Gatling provides an elegant &lt;a href=&quot;http://gatling-tool.org/cheat-sheet/&quot;&gt;DSL&lt;/a&gt; written in &lt;a href=&quot;http://www.scala-lang.org/&quot;&gt;Scala&lt;/a&gt; to describe the test scenarios of your app. DSL scripts are intuitive and simple to create. Using the recorder (like &lt;a href=&quot;http://jmeter.apache.org/&quot;&gt;JMeter&lt;/a&gt;) can generate scripts that will look similar to a hand wrote one. You can then tweak the generated scripts in any way you want.&lt;/p&gt;

&lt;p&gt;You don’t have to know Scala to write scripts. You can get an introduction &lt;a href=&quot;http://twitter.github.io/scala_school/&quot;&gt;here&lt;/a&gt; or just think of them as Javascript code (at least for usage purpose). Scals’s variable declarations are either by var (mutable variable) or by val (immutable variable).&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;httpConf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;baseURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://twitter.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Twitter test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;get login&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticity_token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post login &amp;amp; get the twitter page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sessions&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;session[username_or_email]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;session[password]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;authenticity_token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authenticity_token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bodyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test_some_text&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;strong&amp;gt;444&amp;lt;/strong&amp;gt; Tweets&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;logout from twitter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/logout&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;scn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;atOnce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;protocols&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I created the above script, which load tests the twitter.com site. You can check out the full source code &lt;a href=&quot;https://github.com/mohanraj-nagasamy/gatling-maven-plugin-demo&quot;&gt;here&lt;/a&gt;, which is a cloned maven project from &lt;a href=&quot;https://github.com/excilys/gatling/tree/master/gatling-maven-plugin&quot;&gt;gatling-maven-plugin&lt;/a&gt;. Take a look at the &lt;a href=&quot;https://github.com/mohanraj-nagasamy/gatling-maven-plugin-demo/blob/master/src/test/scala/twitter/TwitterSimulation.scala&quot;&gt;TwitterSimulation.scala&lt;/a&gt; file that I added to the project.&lt;/p&gt;

&lt;p&gt;Once downloaded, execute with the following maven command with your tweeter username and password:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn gatling:execute -Dgatling.simulationClass=twitter.TwitterSimulation -Dusers=&amp;lt;no-of-concurrent-users&amp;gt; -Dtweets=&amp;lt;no-of-your-tweets&amp;gt; -Dusername=&amp;lt;twitter-user-name&amp;gt; -Dpassword=&amp;lt;twitter-password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Keep the concurrent user count between 2 and 5. If you add more load on Twitter they will display the CAPTCHA login page instead. This is to avoid a &lt;a href=&quot;http://en.wikipedia.org/wiki/Denial-of-service_attack&quot;&gt;DoS&lt;/a&gt; attack. In other words, the login test may fail intermittently based on how many times you run the test.&lt;/p&gt;

&lt;p&gt;This script gets you to twitter.com and posts with username, password and authenticity token that is get generated when you request twitter.com.&lt;/p&gt;

&lt;p&gt;You can extract values from the HTTP response like this:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;authenticity_token&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;input type=&quot;hidden&quot; value=&quot;([^&quot;]*)&quot;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;saveAs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;authenticity_token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the response from the HTTP post, it verifies the http status code and the content of the body using bodyString()and regex() utility methods. It also logs-out from the site.&lt;/p&gt;

&lt;p&gt;Real users usually read the pages and clicks through the links. To get this real user simulation, there is a &lt;a href=&quot;https://github.com/excilys/gatling/wiki/Structure-Elements#wiki-pause&quot;&gt;pause()&lt;/a&gt; method that can be used for this purpose. There are other &lt;a href=&quot;https://github.com/excilys/gatling/wiki/Structure-Elements&quot;&gt;structural elements&lt;/a&gt; available.&lt;/p&gt;

&lt;p&gt;The project has two more tests – basic and advanced simulation. Take a look at and run them in the same way as Twitter one.&lt;/p&gt;

&lt;p&gt;Gatling automatically handles HTTP headers and cookies. It also auto redirects based on headers, which makes testing sessions and OAuth based applications easier.&lt;/p&gt;

&lt;p&gt;Testing a RESTful service layer is much easier with a script than using the GUI.
Here is a nice blog post on how Gatling is used to test the &lt;a href=&quot;http://maxdemarzi.com/2013/02/14/neo4j-and-gatling-sitting-in-a-tree-performance-t-e-s-t-ing/&quot;&gt;Neo4j REST&lt;/a&gt; interface.&lt;/p&gt;

&lt;p&gt;To test the SOAP interface, I may use &lt;a href=&quot;http://www.soapui.org/Getting-Started/load-testing.html&quot;&gt;SoapUI&lt;/a&gt;, which handles most of the SOAP plumbing. You can use Gatling to load test SOAP as well, however, you will have to write the SOAP headers and XML body yourself.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Gatling 2.x undertook major &lt;a href=&quot;https://github.com/excilys/gatling/wiki/Gatling-2&quot;&gt;API&lt;/a&gt; refactoring and is not compatible with Gatling 1.x. You may want to watch out for this. I am using version 2.0.0-M3 in all my examples.&lt;/p&gt;

&lt;p&gt;Other tools support scriptings like Beanshell, Python, Clojure, and Erlang. But they are not simple to use and learn like Gatling.&lt;/p&gt;

&lt;h4 id=&quot;maintainability&quot;&gt;Maintainability&lt;/h4&gt;

&lt;p&gt;A script is always easier to modify as a project evolves than maintaining a GUI based load test file. A script also fits very well into your daily workflow as it integrates very well with developer tools like maven, Jenkins, and your favorite &lt;a href=&quot;https://github.com/excilys/gatling/wiki/Ide-integration&quot;&gt;IDE&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;reporting&quot;&gt;Reporting&lt;/h4&gt;
&lt;p&gt;Gatling generates nice and easy to understand &lt;a href=&quot;https://github.com/excilys/gatling/wiki/Reports&quot;&gt;static reports&lt;/a&gt; with metrics, which easily can be shared with anyone on your team. The reports are static and can be run with the daily build or when you release your application. You can then compare the results between each release to monitor how the app is performing.
You can also send the simulation data to &lt;a href=&quot;https://github.com/excilys/gatling/wiki/Graphite&quot;&gt;Graphite&lt;/a&gt; which gives you live statistics.&lt;/p&gt;

&lt;h4 id=&quot;integration-with-other-tools-and-ides&quot;&gt;Integration with other tools and IDEs&lt;/h4&gt;
&lt;p&gt;Gatling integrates with other tools of your choice (which supports scala) like &lt;a href=&quot;https://github.com/excilys/gatling/wiki/Maven-plugin&quot;&gt;maven&lt;/a&gt; and eclipse (or Intelli J) to integrate with your daily workflow. Thus, you don’t have to use another tool to load test your app. There is also a &lt;a href=&quot;https://github.com/excilys/gatling/wiki/Jenkins-Plugin&quot;&gt;Jenkins plugin&lt;/a&gt; available.&lt;/p&gt;

&lt;h4 id=&quot;underlying-technologies&quot;&gt;Underlying Technologies&lt;/h4&gt;
&lt;p&gt;Gatling uses &lt;a href=&quot;http://en.wikipedia.org/wiki/Actor_model&quot;&gt;actor model&lt;/a&gt; and doesn’t require 1 thread per user like &lt;a href=&quot;http://jmeter.apache.org/&quot;&gt;JMeter&lt;/a&gt;. This is one of the main reasons that JMeter tends to choke on a high load scenario.&lt;/p&gt;

&lt;p&gt;Gatling is built on &lt;a href=&quot;http://akka.io/&quot;&gt;Akka actors&lt;/a&gt; to handle large-scale tests and Scala’s DSL capability to build clean and simple scripts. It also uses &lt;a href=&quot;https://github.com/AsyncHttpClient/async-http-client&quot;&gt;asynchronous http client&lt;/a&gt; and non-blocking IO libraries (&lt;a href=&quot;http://netty.io/&quot;&gt;Netty&lt;/a&gt;, &lt;a href=&quot;http://grizzly.java.net/&quot;&gt;Grizzly&lt;/a&gt;).&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;Gatling is definitely a nice tool to have under your belt. Check out their &lt;a href=&quot;https://github.com/excilys/gatling/wiki&quot;&gt;wiki&lt;/a&gt; and &lt;a href=&quot;https://github.com/excilys/gatling&quot;&gt;soucecode&lt;/a&gt;. It has great documentation.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/whittierta&quot;&gt;@whittierta&lt;/a&gt; for proofreading and suggestions.&lt;/p&gt;</content><author><name>mohanraj nagasamy</name></author><category term="Performance" /><summary type="html">When you think about performance testing your application, you may think about the below picture and a tool to test.</summary></entry><entry><title type="html">Blocks in Java Lang</title><link href="/2014/02/23/blocks-in-java-lang.html" rel="alternate" type="text/html" title="Blocks in Java Lang" /><published>2014-02-23T19:29:28-06:00</published><updated>2014-02-23T19:29:28-06:00</updated><id>/2014/02/23/blocks-in-java-lang</id><content type="html" xml:base="/2014/02/23/blocks-in-java-lang.html">&lt;p&gt;We all love blocks in Ruby. Wouldn’t it be great if Java Lang had support for blocks? Well, Java Lang will support &lt;a href=&quot;http://openjdk.java.net/projects/lambda/&quot;&gt;blocks/lambdas&lt;/a&gt; in &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&quot;&gt;jdk8&lt;/a&gt;, but in a limited way.&lt;/p&gt;

&lt;p&gt;Until you get a chance to work with &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&quot;&gt;jdk8&lt;/a&gt; for real blocks/lambdas, there is an old trick we can apply while creating/initializing an object. That is called the less known &lt;a href=&quot;http://c2.com/cgi/wiki?DoubleBraceInitialization&quot;&gt;“Double Brace Initialization”&lt;/a&gt; java idiom. This just works for &lt;strong&gt;creating/initializing an object&lt;/strong&gt;. You can’t apply this idiom in other places like you would in Ruby. But, this trick works in all the version of java as well including java 1.2&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Let’s say you have the following class and want to create a list of valid order statuses:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderStatus.java&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
 
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
        &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First you would create something like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VALID_ORDER_STATUSES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you would create a static block and add the valid order statuses:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;VALID_ORDER_STATUSES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;01&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Order Placed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;VALID_ORDER_STATUSES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;02&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Order Processed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;VALID_ORDER_STATUSES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;03&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Order Cancelled&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;VALID_ORDER_STATUSES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;04&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Order Failed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wouldn’t be great if we can combine into one step? Well, we can do by using Double Brace Initialization. Let’s see how it would look:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VALID_ORDER_STATUSES_WITH_DOUBLE_BRACE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tadd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;01&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Order Placed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tadd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;02&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Order Processed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tadd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;03&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Order Cancelled&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tadd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;04&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Order Failed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code is completely valid and works in &lt;strong&gt;all versions of java&lt;/strong&gt;. You may wonder what is going on here.&lt;/p&gt;

&lt;p&gt;The first brace creates &lt;strong&gt;an anonymous inner/subclass&lt;/strong&gt; that extends HashSet and the second one declares &lt;strong&gt;instance initializer&lt;/strong&gt;. The inner class doesn’t add new instance variables, but it contains an initializer block.&lt;/p&gt;

&lt;p&gt;Let’s see how we can apply this trick while creating &lt;em&gt;OrderStatus&lt;/em&gt; with the default constructor, not using two params constructor.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INVALID_ORDER_STATUS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;XX&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Invalid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You have to note that if you create a new object with the same order status code and description is &lt;strong&gt;not exactly equal&lt;/strong&gt; to the one you created.&lt;/p&gt;

&lt;p&gt;The condition would be false in equals() methods:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s say you are creating a new:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INVALID_ORDER_STATUS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;XX&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Invalid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INVALID_ORDER_STATUS_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;XX&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Invalid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INVALID_ORDER_STATUS.equals(INVALID_ORDER_STATUS_2)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INVALID_ORDER_STATUS.equals(INVALID_ORDER_STATUS_3)&lt;/code&gt; will return false, because it has different anonymous class.&lt;/p&gt;

&lt;p&gt;Collection classes should be fine if you create objects like the one we created. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VALID_ORDER_STATUSES_WITH_DOUBLE_BRACE.contains(new OrderStatus(&quot;01&quot;, &quot;Order Placed&quot;))&lt;/code&gt; will return true.&lt;/p&gt;

&lt;p&gt;You can use the same trick, if you want to call some methods just after creating an object like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;step1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;step2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;action result = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And, you can use this idiom while passing object as a parameter.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;valideOrderStatues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;01&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Order Placed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;02&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Order Processed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;03&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Order Cancelled&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;04&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Order Failed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It just makes your code more concise. Try to use wherever it makes sense. All the code is in &lt;a href=&quot;https://github.com/mohanraj-nagasamy/DoubleBrace/&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;</content><author><name>mohanraj nagasamy</name></author><category term="Java" /><summary type="html">We all love blocks in Ruby. Wouldn’t it be great if Java Lang had support for blocks? Well, Java Lang will support blocks/lambdas in jdk8, but in a limited way.</summary></entry><entry><title type="html">Browser Cache: How ETags works in Rails 3 and Rails 4</title><link href="/2014/02/22/browser-cache-how-etags-works-in-rails-3-and-rails-4.html" rel="alternate" type="text/html" title="Browser Cache: How ETags works in Rails 3 and Rails 4" /><published>2014-02-22T16:39:52-06:00</published><updated>2014-02-22T16:39:52-06:00</updated><id>/2014/02/22/browser-cache-how-etags-works-in-rails-3-and-rails-4</id><content type="html" xml:base="/2014/02/22/browser-cache-how-etags-works-in-rails-3-and-rails-4.html">&lt;p&gt;Entity tags (ETags) are a mechanism that web/application servers and browsers use to determine whether the entity or component (images, scripts, stylesheets, page content, etc) in the browser’s cache matches the one on the origin server.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Rails 3 and Rails 4 uses ETags by default and let’s look at how they work first:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/etags-rails-3-and-rails-4.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s say you are going to a blog website and requesting a list of posts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First Request:
    &lt;ul&gt;
      &lt;li&gt;The browser makes the initial first request&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;First Response:
    &lt;ul&gt;
      &lt;li&gt;Rails creates response body&lt;/li&gt;
      &lt;li&gt;Rails creates ETag&lt;/li&gt;
      &lt;li&gt;Rails responds with ETag header, status code 200&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The browser caches the response now. When the browser makes subsequent requests, here is the flow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Subsequent Request:
    &lt;ul&gt;
      &lt;li&gt;The browser requests with the header ‘If-None-Matched’ with ETag value from the initial request.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Subsequent Response:
    &lt;ul&gt;
      &lt;li&gt;Rails creates the body and ETag&lt;/li&gt;
      &lt;li&gt;Compares ETag value with ‘If-None-Matched’ value&lt;/li&gt;
      &lt;li&gt;If ETag match then the response body is not included in the response and returns with 304 Not Modified status&lt;/li&gt;
      &lt;li&gt;If ETag doesn’t match then the body is included in the response and ETags are included in the header&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;advantage&quot;&gt;Advantage&lt;/h4&gt;
&lt;p&gt;So what’s the advantage when ETag matches with the one on the server? The Rails doesn’t send the body content as part of the response. So the response is small and fast to travel on the network. The browser loads the contents from the browser cache instead which makes the website faster.&lt;/p&gt;

&lt;h5 id=&quot;enable-etag&quot;&gt;Enable ETag&lt;/h5&gt;
&lt;p&gt;So what you have to do to enable the ETag cache? Nothing. You don’t have to do anything to take advantage of the ETag cache.&lt;/p&gt;

&lt;p&gt;The below code uses Rails default ETag cache:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;respond_to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# show.html.erb&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;edit&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So how do rails generate ETags? Well, it will render the response and generates the ETags from the response body.
The code may look like something like this in rails:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;headers['ETag'] = Digest::MD5.hexdigest(body)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;custom-etags&quot;&gt;Custom ETags&lt;/h4&gt;
&lt;p&gt;It is not a good idea to process the entire response body every time to generate ETag. Generating the entire response body involves calling the DB to fetch all the related data and processing HTML templates and partial page renderings. This is a costly process. 
How do you solve this issue? You have fresh_when and stale? rails cache helper comes in handy to rescue you.&lt;/p&gt;

&lt;p&gt;The code will look like this with fresh_when and stale?:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stale?&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;respond_to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# show.html.erb&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;edit&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fresh_when&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So how do rails generate ETags now? The code may look like something like this in rails for stale? and fresh_when helpers:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;headers['ETag'] = Digest::MD5.hexdigest(@post.cache_key)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cache_key is combination of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model_name/model.id-model.updated_at&lt;/code&gt;. It will be like this for the Post model: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post/123-201312121212&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;when-do-you-use-fresh_when-and-stale-cache-helper-and-whats-the-difference&quot;&gt;When do you use fresh_when and stale? cache helper and what’s the difference?&lt;/h5&gt;
&lt;p&gt;If you have special response processing like the one the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;show&lt;/code&gt; method, then use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stale?&lt;/code&gt; helper. If you don’t have any special response processing like the one in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edit&lt;/code&gt; method and using default-rendering mechanism (i.e. you’re not using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;respond_to&lt;/code&gt; or calling render yourself) then use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fresh_when&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;customize-etag-generation&quot;&gt;Customize ETag generation&lt;/h4&gt;
&lt;p&gt;If you cache based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_user or current_customer&lt;/code&gt;, you can pass multiple arguments to generate ETag. The arguments have to be a Hash.&lt;/p&gt;

&lt;p&gt;The sample code will look like:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stale?&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;current_user_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;respond_to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# show.html.erb&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;edit&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fresh_when&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;current_user_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recent&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fresh_when&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;current_user_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rails-4&quot;&gt;Rails 4&lt;/h4&gt;
&lt;p&gt;When look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edit&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recent&lt;/code&gt; methods, there are some repetitions. How do we DRY it up? That’s when Rails 4 declarative ETags comes into play.&lt;/p&gt;

&lt;p&gt;Rails 3 and Rails 4 uses ETags by default for browser caching. But Rails 4 has a feature called declarative ETags, which allows you to add additional controller-wide information when generating an ETag.&lt;/p&gt;

&lt;p&gt;Let’s look at how to apply Rails 4 declarative ETags to the above code:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;etag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stale?&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;respond_to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# show.html.erb&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;edit&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fresh_when&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recent&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fresh_when&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can have multiple declarative ETags like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;etag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;etag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can have conditions inside declarative ETags like this one to run them only on certain actions:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;etag&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;current_user_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(show edit)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Declarative ETags doesn’t support &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:only&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:if&lt;/code&gt; options yet like one we have on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;before_filter/before_action&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_filer/after_action&lt;/code&gt; to run call back only on certain actions.&lt;/p&gt;

&lt;h4 id=&quot;resouces&quot;&gt;Resouces&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.remarkablelabs.com/2012/12/generate-controller-wide-etags-rails-4-countdown-to-2013&quot;&gt;http://blog.remarkablelabs.com/2012/12/generate-controller-wide-etags-rails-4-countdown-to-2013&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.upgradingtorails4.com/&quot;&gt;http://www.upgradingtorails4.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/caching_with_rails.html&quot;&gt;http://guides.rubyonrails.org/caching_with_rails.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/http-caching-ruby-rails#conditional-cache-headers&quot;&gt;https://devcenter.heroku.com/articles/http-caching-ruby-rails#conditional-cache-headers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>mohanraj nagasamy</name></author><category term="Cache" /><category term="Performance" /><summary type="html">Entity tags (ETags) are a mechanism that web/application servers and browsers use to determine whether the entity or component (images, scripts, stylesheets, page content, etc) in the browser’s cache matches the one on the origin server.</summary></entry></feed>